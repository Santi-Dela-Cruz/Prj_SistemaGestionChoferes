@startuml SistemaChoferes

' Definición de clases
class RegistroChofer {
  - huellaDAO: HuellaDAO
  - choferDAO: ChoferDAO
  - vehiculoDAO: VehiculoDAO
  - rutasDAO: RutasDAO
  + registrarNuevoChofer(idCedula: String, nombre: String, apellido: String, telefono: String, idCodigoHuella: String, idPlaca: String, tipoVehiculo: String, nombreRuta: String, direccion: String, correo: String, categoriaLicencia: String, fechaVencimientoLicencia: java.sql.Date, marcaVehiculo: String, modeloVehiculo: String): void
  + actualizarChofer(idChofer: int, idCedula: String, nombre: String, apellido: String, telefono: String, idCodigoHuella: String, idPlaca: String, tipoVehiculo: String, nombreRuta: String, direccion: String, correo: String, categoriaLicencia: String, fechaVencimientoLicencia: java.sql.Date, marcaVehiculo: String, modeloVehiculo: String): void
}

class RegistroIngreso {
  - choferDAO: ChoferDAO
  - registroEstadosDAO: RegistroEstadosDAO
  - registroPenalizacionesDAO: RegistroPenalizacionesDAO
  - vehiculoDAO: VehiculoDAO
  - rutasDAO: RutasDAO
  + registrarIngreso(idCedula: String): void
}

class SistemaChoferes {
  + main(args: String[]): void
}

class AdministradorDAO {
  - connection: Connection
  + create(admin: Administrador): boolean
  + readAll(): List<Administrador>
  + update(admin: Administrador): boolean
  + delete(id: Integer): boolean
  + readBy(id: Integer): Administrador
  + getAdministrador(usuarioCorreo: String, contrasena: String): Administrador
}

class ChoferDAO {
  - connection: Connection
  + create(chofer: Chofer): boolean
  + readAll(): List<Chofer>
  + update(chofer: Chofer): boolean
  + delete(id: Integer): boolean
  + readBy(id: Integer): Chofer
  + existeChoferPorCedula(idCedula: String): boolean
  + existeChoferPorTelefono(telefono: String): boolean
  + existeChoferPorCorreo(correo: String): boolean
  + obtenerChoferPorCedula(idCedula: String): Chofer
}

class HuellaDAO {
  - connection: Connection
  + create(huella: Huella): boolean
  + readAll(): List<Huella>
  + update(huella: Huella): boolean
  + delete(id: Integer): boolean
  + readBy(id: Integer): Huella
  + obtenerHuellaPorChoferId(idChofer: int): Huella
}

interface IDAO {
  + create(entity: T): boolean
  + readAll(): List<T>
  + update(entity: T): boolean
  + delete(id: Integer): boolean
  + readBy(id: Integer): T
}

class LimpiarTabla {
  - truncarTabla(nombreTabla: String): void
  + limpiarTodasTablas(): void
}

class ModificacionesDAO {
  - connection: Connection
  + create(modificaciones: Modificaciones): boolean
  + readAll(): List<Modificaciones>
  + update(modificaciones: Modificaciones): boolean
  + delete(id: Integer): boolean
  + readBy(id: Integer): Modificaciones
}

class RegistroEstadosDAO {
  - connection: Connection
  + create(registroEstado: RegistroEstados): boolean
  + readAll(): List<RegistroEstados>
  + update(registroEstado: RegistroEstados): boolean
  + delete(id: Integer): boolean
  + readBy(id: Integer): RegistroEstados
}

class RegistroPenalizacionesDAO {
  - connection: Connection
  + create(registroPenalizaciones: RegistroPenalizaciones): boolean
  + readAll(): List<RegistroPenalizaciones>
  + update(registroPenalizaciones: RegistroPenalizaciones): boolean
  + delete(id: Integer): boolean
  + readBy(id: Integer): RegistroPenalizaciones
  + actualizarPenalizaciones(idChofer: int): boolean
}

class RutasDAO {
  - connection: Connection
  + create(ruta: Rutas): boolean
  + readAll(): List<Rutas>
  + update(ruta: Rutas): boolean
  + delete(id: Integer): boolean
  + readBy(id: Integer): Rutas
  + existeRuta(idChofer: int): boolean
  + obtenerRutaPorChoferId(idChofer: int): Rutas
}

class VehiculoDAO {
  - connection: Connection
  + create(vehiculo: Vehiculo): boolean
  + readAll(): List<Vehiculo>
  + update(vehiculo: Vehiculo): boolean
  + delete(id: Integer): boolean
  + readBy(id: Integer): Vehiculo
  + obtenerVehiculoPorChoferId(idChofer: int): Vehiculo
  + existeVehiculo(idChofer: int): boolean
  + existeVehiculoPorPlaca(id_Placa: String): boolean
}

class DataHelper {
  + conectar(): Connection
  + desconectar(): void
}

class Validaciones {
  + validarBanderas(longitud: int, palabra: String): boolean
}

class Administrador {
  + getIdAdministrador(): int
  + setIdAdministrador(idAdministrador: int): void
  + getUsuario(): String
  + setUsuario(usuario: String): void
  + getNombres(): String
  + setNombres(nombres: String): void
  + getApellidos(): String
  + setApellidos(apellidos: String): void
  + getCorreoAdmin(): String
  + setCorreoAdmin(correoAdmin: String): void
  + getContrasenaAdmin(): String
  + setContrasenaAdmin(contrasenaAdmin: String): void
  + getEstadoAdmin(): String
  + setEstadoAdmin(estadoAdmin: String): void
  + getCargoAdmin(): String
  + setCargoAdmin(cargoAdmin: String): void
  + getFechaIngreso(): Date
  + setFechaIngreso(fechaIngreso: Date): void
  + getHoraIngreso(): Time
  + setHoraIngreso(horaIngreso: Time): void
  + getTelefono(): String
  + setTelefono(telefono: String): void
  + getDireccion(): String
  + setDireccion(direccion: String): void
  + getEstado(): String
  + setEstado(estado: String): void
}

class Chofer {
  + getIdChofer(): int
  + setIdChofer(idChofer: int): void
  + getIdCedula(): String
  + setIdCedula(idCedula: String): void
  + getNombre(): String
  + setNombre(nombre: String): void
  + getApellido(): String
  + setApellido(apellido: String): void
  + getTelefono(): String
  + setTelefono(telefono: String): void
  + getDireccion(): String
  + setDireccion(direccion: String): void
  + getCorreo(): String
  + setCorreo(correo: String): void
  + getCategoriaLicencia(): String
  + setCategoriaLicencia(categoriaLicencia: String): void
  + getFechaVencimientoLicencia(): Date
  + setFechaVencimientoLicencia(fechaVencimientoLicencia: Date): void
  + getEstado(): String
  + setEstado(estado: String): void
}

class Huella {
  + getIdHuella(): int
  + setIdHuella(idHuella: int): void
  + getIdCodigoHuella(): String
  + setIdCodigoHuella(idCodigoHuella: String): void
  + getFechaRegHuella(): Date
  + setFechaRegHuella(fechaRegHuella: Date): void
  + getIdChofer(): int
  + setIdChofer(idChofer: int): void
  + getEstado(): String
  + setEstado(estado: String): void
}

class Modificaciones {
  + getId(): int
  + setId(id: int): void
  + getIdAdministrador(): int
  + setIdAdministrador(idAdministrador: int): void
  + getFechaModificacion(): Date
  + setFechaModificacion(fechaModificacion: Date): void
  + getHoraModificacion(): String
  + setHoraModificacion(horaModificacion: String): void
  + getAccionAdmin(): String
  + setAccionAdmin(accionAdmin: String): void
}

class RegistroEstados {
  + getEstado(): String
  + setEstado(estado: String): void
  + getIdRegEst(): int
  + setIdRegEst(idRegEst: int): void
  + getFechaIngreso(): Date
  + setFechaIngreso(fechaIngreso: Date): void
  + getHoraIngreso(): Time
  + setHoraIngreso(horaIngreso: Time): void
  + getEstadoChofer(): String
  + setEstadoChofer(estadoChofer: String): void
  + isAutorizacionChofer(): boolean
  + setAutorizacionChofer(autorizacionChofer: boolean): void
  + getIdChofer(): int
  + setIdChofer(idChofer: int): void
}

class RegistroPenalizaciones {
  + getEstado(): String
  + setEstado(estado: String): void
  + getIdRegPen(): int
  + setIdRegPen(idRegPen: int): void
  + getNInfracciones(): int
  + setNInfracciones(nInfracciones: int): void
  + getPenalizacionChofer(): String
  + setPenalizacionChofer(penalizacionChofer: String): void
  + getIdChofer(): int
  + setIdChofer(idChofer: int): void
}

class Rutas {
  + getEstado(): String
  + setEstado(estado: String): void
  + getIdRuta(): int
  + setIdRuta(idRuta: int): void
  + getNombreRuta(): String
  + setNombreRuta(nombreRuta: String): void
  + getIdChofer(): int
  + setIdChofer(idChofer: int): void
}

class Vehiculo {
  + getEstado(): String
  + setEstado(estado: String): void
  + getIdVehiculo(): int
  + setIdVehiculo(idVehiculo: int): void
  + getIdPlaca(): String
  + setIdPlaca(idPlaca: String): void
  + getTipoVehiculo(): String
  + setTipoVehiculo(tipoVehiculo: String): void
  + getIdChofer(): int
  + setIdChofer(idChofer: int): void
  + getMarcaVehiculo(): String
  + setMarcaVehiculo(marcaVehiculo: String): void
  + getModeloVehiculo(): String
  + setModeloVehiculo(modeloVehiculo: String): void
}

' Relaciones entre las clases
RegistroChofer --> HuellaDAO : usa
RegistroChofer --> ChoferDAO : usa
RegistroChofer --> VehiculoDAO : usa
RegistroChofer --> RutasDAO : usa
RegistroIngreso --> ChoferDAO : usa
RegistroIngreso --> RegistroEstadosDAO : usa
RegistroIngreso --> RegistroPenalizacionesDAO : usa
RegistroIngreso --> VehiculoDAO : usa
RegistroIngreso --> RutasDAO : usa
SistemaChoferes --> RegistroChofer : usa
AdministradorDAO --> Administrador : usa
ChoferDAO --> Chofer : usa
HuellaDAO --> Huella : usa
ModificacionesDAO --> Modificaciones : usa
RegistroEstadosDAO --> RegistroEstados : usa
RegistroPenalizacionesDAO --> RegistroPenalizaciones : usa
RutasDAO --> Rutas : usa
VehiculoDAO --> Vehiculo : usa

' Implementación de la interfaz
AdministradorDAO -|> IDAO
ChoferDAO -|> IDAO
HuellaDAO -|> IDAO
ModificacionesDAO -|> IDAO
RegistroEstadosDAO -|> IDAO
RegistroPenalizacionesDAO -|> IDAO
RutasDAO -|> IDAO
VehiculoDAO -|> IDAO

@enduml
