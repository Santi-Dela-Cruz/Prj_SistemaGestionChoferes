
package com.sistemaChoferes.ui;

import com.sistemaChoferes.dataacess.entity.Administrador;
import com.sistemaChoferes.dataacess.datahelper.DataHelper;
import com.sistemaChoferes.dataacess.dao.AdministradorDAO;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class listadoChoferesCRUD extends javax.swing.JFrame {
    
    public static listadoChoferesCRUD listadoChoferesInstance;
    private Administrador administrador;
    private AdministradorDAO adminDAO;
    public static boolean datosActualizados;
    public static boolean datosAgregados;
    
    DataHelper conexion;
    Connection connection;
    DefaultTableModel defTableMod;
    Statement st;
    ResultSet rs;
    int idc;


    /**
     * Creates new form listadoChoferesCRUD
     */
    public listadoChoferesCRUD() {
        initComponents();
        setLocationRelativeTo(null);
        consultarTabla();
        listadoChoferesInstance = this;
    }
    
    public listadoChoferesCRUD(Administrador admin) {
        initComponents();
        setLocationRelativeTo(null);
        consultarTabla();
        listadoChoferesInstance = this;
        this.administrador = admin;
        mostrarInformacionAdmin(administrador);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnAnadir = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnVisualizar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbDatosGenerales = new javax.swing.JTable();
        ldAdmin = new javax.swing.JLabel();
        lbEst = new javax.swing.JLabel();
        lbCar = new javax.swing.JLabel();
        lbAdministrador = new javax.swing.JLabel();
        lbEstado = new javax.swing.JLabel();
        lbCargo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Panel de Control de Choferes");

        btnAnadir.setBackground(new java.awt.Color(153, 255, 153));
        btnAnadir.setText("AÃ±adir");
        btnAnadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnadirActionPerformed(evt);
            }
        });

        btnEditar.setBackground(new java.awt.Color(255, 255, 204));
        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnVisualizar.setBackground(new java.awt.Color(153, 255, 204));
        btnVisualizar.setText("Visualizar");
        btnVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(255, 153, 153));
        btnEliminar.setText("Eliminar");

        tbDatosGenerales.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "CEDULA", "NOMBRES", "APELLIDOS", "PLACA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbDatosGenerales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbDatosGeneralesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbDatosGenerales);

        ldAdmin.setText("Administrador:");

        lbEst.setText("Estado:");

        lbCar.setText("Cargo:");

        lbAdministrador.setText("jLabel5");

        lbEstado.setText("jLabel6");

        lbCargo.setText("jLabel7");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lbCar)
                                .addGap(50, 50, 50)
                                .addComponent(lbCargo, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 158, Short.MAX_VALUE)
                                .addComponent(btnAnadir)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEditar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnVisualizar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEliminar)))
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ldAdmin)
                            .addComponent(lbEst))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbAdministrador, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                            .addComponent(lbEstado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(80, 80, 80)
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ldAdmin)
                    .addComponent(lbAdministrador))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbEst)
                    .addComponent(lbEstado))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAnadir)
                            .addComponent(btnEditar)
                            .addComponent(btnVisualizar)
                            .addComponent(btnEliminar)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbCar)
                            .addComponent(lbCargo))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        if (idc == 0) {
                JOptionPane.showMessageDialog(null, "Por favor, seleccione un registro para editar");
                return;
            }

            formularioIngreso formIngreso = null;
        try {
            formIngreso = new formularioIngreso(idc);
        } catch (Exception ex) {
            Logger.getLogger(listadoChoferesCRUD.class.getName()).log(Level.SEVERE, null, ex);
        }
            formIngreso.setVisible(true);
            tbDatosGenerales.clearSelection();

            formIngreso.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                    if (listadoChoferesCRUD.datosActualizados) {
                        try {
                            registrarModificacion("Editar");
                        } catch (Exception e) {
                            e.printStackTrace();
                            JOptionPane.showMessageDialog(null, "Error al registrar la modificaciÃ³n: " + e.getMessage());
                        }
                        listadoChoferesCRUD.datosActualizados = false;
                    } else {
                        System.out.println("No se han realizado cambios.");
                    }
                }
            });

            datosActualizados = false;
            idc = 0;
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnAnadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnadirActionPerformed
        formularioIngreso formIngreso = new formularioIngreso();
        formIngreso.setVisible(true);

        formIngreso.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                if (listadoChoferesCRUD.datosAgregados) {
                    try {
                        registrarModificacion("Agregar");
                    } catch (Exception e) {
                        e.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Error al registrar la modificaciÃ³n: " + e.getMessage());
                    }
                    listadoChoferesCRUD.datosAgregados = false;
                    } else {
                        System.out.println("No se han realizado cambios.");
                    }
                }
            });
    }//GEN-LAST:event_btnAnadirActionPerformed

    private void tbDatosGeneralesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbDatosGeneralesMouseClicked
        int row = tbDatosGenerales.getSelectedRow();
        if (row == -1) {
            idc = 0;
        } else {
            idc = Integer.parseInt(tbDatosGenerales.getValueAt(row, 0).toString());
        }
    }//GEN-LAST:event_tbDatosGeneralesMouseClicked

    private void btnVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarActionPerformed
        if (idc == 0) {
        JOptionPane.showMessageDialog(null, "Por favor, seleccione un registro para visualizar");
        return;
        }

        viewDatosGenerales viewEstados = null;
        try {
            viewEstados = new viewDatosGenerales(idc);
        } catch (Exception ex) {
            Logger.getLogger(listadoChoferesCRUD.class.getName()).log(Level.SEVERE, null, ex);
        }
        viewEstados.setVisible(true);
        tbDatosGenerales.clearSelection();
        try {
            registrarModificacion("Visualizar");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al registrar la modificaciÃ³n: " + e.getMessage());
        }
        idc = 0;
    }//GEN-LAST:event_btnVisualizarActionPerformed

    private void tbDatosGeneralesMouseReleased(java.awt.event.MouseEvent evt) {                                              
        int row = tbDatosGenerales.getSelectedRow();
        if (row == -1) {
            idc = 0;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(listadoChoferesCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(listadoChoferesCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(listadoChoferesCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(listadoChoferesCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(listadoChoferesCRUD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new listadoChoferesCRUD().setVisible(true);
            }
        });
    }
    private void consultarTabla() {
    String sql = "SELECT c.id_Chofer, c.id_Cedula, c.nombre, c.apellido, v.id_Placa FROM choferes c LEFT JOIN vehiculo v ON c.id_Chofer = v.id_Chofer LEFT JOIN rutas r ON c.id_Chofer = r.id_Chofer WHERE c.estado = 'A' AND v.estado = 'A' AND r.estado = 'A';";
        try {
            connection = conexion.conectar();
            st = connection.createStatement();
            rs = st.executeQuery(sql);
            Object[] datosChoferes = new Object[5];
            defTableMod = (DefaultTableModel) tbDatosGenerales.getModel();
            while (rs.next()) {
                datosChoferes[0] = rs.getInt("id_Chofer");
                datosChoferes[1] = rs.getString("id_Cedula");
                datosChoferes[2] = rs.getString("nombre");
                datosChoferes[3] = rs.getString("apellido");
                datosChoferes[4] = rs.getString("id_Placa");

                defTableMod.addRow(datosChoferes);
            }
            tbDatosGenerales.setModel(defTableMod);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (st != null) st.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (connection != null) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    
    public void actualizarTabla() {
        defTableMod.setRowCount(0);
        consultarTabla();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnadir;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnVisualizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbAdministrador;
    private javax.swing.JLabel lbCar;
    private javax.swing.JLabel lbCargo;
    private javax.swing.JLabel lbEst;
    private javax.swing.JLabel lbEstado;
    private javax.swing.JLabel ldAdmin;
    private javax.swing.JTable tbDatosGenerales;
    // End of variables declaration//GEN-END:variables

    private void mostrarInformacionAdmin(Administrador administrador) {
        if (administrador != null) {
            lbAdministrador.setText(administrador.getNombres() + " " + administrador.getApellidos());
            lbEstado.setText(administrador.getEstadoAdmin());
            lbCargo.setText(administrador.getCargoAdmin());
        }
    }
    
    private void registrarModificacion(String accion) {
    if (administrador == null) {
        throw new IllegalStateException("Administrador no inicializado.");
    }

    Connection connection = null;
    PreparedStatement statement = null;
    try {
        connection = DataHelper.conectar();
        if (connection == null || connection.isClosed()) {
            throw new SQLException("No se pudo establecer una conexiÃ³n con la base de datos.");
        }

        String fechaActual = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
        String horaActual = new SimpleDateFormat("HH:mm:ss").format(new Date());

        String sql = "INSERT INTO modificaciones (id_Administrador, fechaModificacion, horaModificacion, accionAdmin) "
                + "VALUES (?, ?, ?, ?)";
        statement = connection.prepareStatement(sql);
        statement.setInt(1, administrador.getIdAdministrador());
        statement.setString(2, fechaActual);
        statement.setString(3, horaActual);
        statement.setString(4, accion);

        statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException("Error al registrar la modificaciÃ³n: " + e.getMessage());
        } finally {
            try {
                if (statement != null) statement.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (connection != null && !connection.isClosed()) connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
}
